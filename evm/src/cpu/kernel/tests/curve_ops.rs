#[cfg(test)]
mod bn {
    use anyhow::Result;
    use ethereum_types::U256;

    use crate::cpu::kernel::aggregator::KERNEL;
    use crate::cpu::kernel::interpreter::run_interpreter;
    use crate::cpu::kernel::tests::u256ify;

    #[test]
    fn test_ec_ops() -> Result<()> {
        // Make sure we can parse and assemble the entire kernel.
        let ec_add = KERNEL.global_labels["ec_add"];
        let ec_double = KERNEL.global_labels["ec_double"];
        let ec_mul = KERNEL.global_labels["ec_mul"];
        let identity = ("0x0", "0x0");
        let invalid = ("0x0", "0x3"); // Not on curve
        let point0 = (
            "0x1feee7ec986e198890cb83be8b8ba09ee953b3f149db6d9bfdaa5c308a33e58d",
            "0x2051cc9a9edd46231604fd88f351e95ec72a285be93e289ac59cb48561efb2c6",
        );
        let point1 = (
            "0x15b64d0a5f329fb672029298be8050f444626e6de11903caffa74b388075be1b",
            "0x2d9e07340bd5cd7b70687b98f2500ff930a89a30d7b6a3e04b1b4d345319d234",
        );
        // point2 = point0 + point1
        let point2 = (
            "0x18659c0e0a8fedcb8747cf463fc7cfa05f667d84e771d0a9521fc1a550688f0c",
            "0x283ed10b42703e187e7a808aeb45c6b457bc4cc7d704e53b3348a1e3b0bfa55b",
        );
        // point3 = 2 * point0
        let point3 = (
            "0x17da2b7b1a01c8dfdf0f5a6415833c7d755d219aa7e2c4cd0ac83d87d0ca4217",
            "0xc9ace9de14aac8114541b50c19320eb40f0eeac3621526d9e34dbcf4c3a6c0f",
        );
        let s = "0xabb2a34c0e7956cfe6cef9ddb7e810c45ea19a6ebadd79c21959af09f5ba480a";
        // point4 = s * point0
        let point4 = (
            "0xe519344959cc17021fe98878f947f5c1b1675325533a620c1684cfa6367e6c0",
            "0x7496a7575b0b6a821e19ce780ecc3e0b156e605327798693defeb9f265b7a6f",
        );

        // // Standard addition #1
        // let initial_stack = u256ify(["0xdeadbeef", point0.1, point0.0, point1.1, point1.0])?;
        // let stack = run_interpreter(ec_add, initial_stack)?.stack().to_vec();
        // assert_eq!(stack, u256ify([point2.1, point2.0])?);
        // // Standard addition #2
        // let initial_stack = u256ify(["0xdeadbeef", point1.1, point1.0, point0.1, point0.0])?;
        // let stack = run_interpreter(ec_add, initial_stack)?.stack().to_vec();
        // assert_eq!(stack, u256ify([point2.1, point2.0])?);
        //
        // // Standard doubling #1
        // let initial_stack = u256ify(["0xdeadbeef", point0.1, point0.0, point0.1, point0.0])?;
        // let stack = run_interpreter(ec_add, initial_stack)?.stack().to_vec();
        // assert_eq!(stack, u256ify([point3.1, point3.0])?);
        // // Standard doubling #2
        let initial_stack = u256ify(["0xdeadbeef", point0.1, point0.0])?;
        let stack = run_interpreter(ec_double, initial_stack)?.stack().to_vec();
        assert_eq!(stack, u256ify([point3.1, point3.0])?);
        // // Standard doubling #3
        // let initial_stack = u256ify(["0xdeadbeef", "0x2", point0.1, point0.0])?;
        // let stack = run_interpreter(ec_mul, initial_stack)?.stack().to_vec();
        // assert_eq!(stack, u256ify([point3.1, point3.0])?);
        //
        // // Addition with identity #1
        // let initial_stack = u256ify(["0xdeadbeef", identity.1, identity.0, point1.1, point1.0])?;
        // let stack = run_interpreter(ec_add, initial_stack)?.stack().to_vec();
        // assert_eq!(stack, u256ify([point1.1, point1.0])?);
        // // Addition with identity #2
        // let initial_stack = u256ify(["0xdeadbeef", point1.1, point1.0, identity.1, identity.0])?;
        // let stack = run_interpreter(ec_add, initial_stack)?.stack().to_vec();
        // assert_eq!(stack, u256ify([point1.1, point1.0])?);
        // // Addition with identity #3
        // let initial_stack =
        //     u256ify(["0xdeadbeef", identity.1, identity.0, identity.1, identity.0])?;
        // let stack = run_interpreter(ec_add, initial_stack)?.stack().to_vec();
        // assert_eq!(stack, u256ify([identity.1, identity.0])?);
        //
        // // Addition with invalid point(s) #1
        // let initial_stack = u256ify(["0xdeadbeef", point0.1, point0.0, invalid.1, invalid.0])?;
        // let stack = run_interpreter(ec_add, initial_stack)?.stack().to_vec();
        // assert_eq!(stack, vec![U256::MAX, U256::MAX]);
        // // Addition with invalid point(s) #2
        // let initial_stack = u256ify(["0xdeadbeef", invalid.1, invalid.0, point0.1, point0.0])?;
        // let stack = run_interpreter(ec_add, initial_stack)?.stack().to_vec();
        // assert_eq!(stack, vec![U256::MAX, U256::MAX]);
        // // Addition with invalid point(s) #3
        // let initial_stack = u256ify(["0xdeadbeef", invalid.1, invalid.0, identity.1, identity.0])?;
        // let stack = run_interpreter(ec_add, initial_stack)?.stack().to_vec();
        // assert_eq!(stack, vec![U256::MAX, U256::MAX]);
        // // Addition with invalid point(s) #4
        // let initial_stack = u256ify(["0xdeadbeef", invalid.1, invalid.0, invalid.1, invalid.0])?;
        // let stack = run_interpreter(ec_add, initial_stack)?.stack().to_vec();
        // assert_eq!(stack, vec![U256::MAX, U256::MAX]);

        // Scalar multiplication #1
        // let initial_stack = u256ify(["0xdeadbeef", s, point0.1, point0.0])?;
        // let stack = run_interpreter(ec_mul, initial_stack)?.stack().to_vec();
        // assert_eq!(stack, u256ify([point4.1, point4.0])?);
        // // Scalar multiplication #2
        // let initial_stack = u256ify(["0xdeadbeef", "0x0", point0.1, point0.0])?;
        // let stack = run_interpreter(ec_mul, initial_stack)?.stack().to_vec();
        // assert_eq!(stack, u256ify([identity.1, identity.0])?);
        // // Scalar multiplication #3
        // let initial_stack = u256ify(["0xdeadbeef", "0x1", point0.1, point0.0])?;
        // let stack = run_interpreter(ec_mul, initial_stack)?.stack().to_vec();
        // assert_eq!(stack, u256ify([point0.1, point0.0])?);
        // // Scalar multiplication #4
        // let initial_stack = u256ify(["0xdeadbeef", s, identity.1, identity.0])?;
        // let stack = run_interpreter(ec_mul, initial_stack)?.stack().to_vec();
        // assert_eq!(stack, u256ify([identity.1, identity.0])?);
        // // Scalar multiplication #5
        // let initial_stack = u256ify(["0xdeadbeef", s, invalid.1, invalid.0])?;
        // let stack = run_interpreter(ec_mul, initial_stack)?.stack().to_vec();
        // assert_eq!(stack, vec![U256::MAX, U256::MAX]);
        //
        // // Multiple calls
        // let ec_mul_hex = format!("0x{ec_mul:x}");
        // let initial_stack = u256ify([
        //     "0xdeadbeef",
        //     s,
        //     &ec_mul_hex,
        //     identity.1,
        //     identity.0,
        //     point0.1,
        //     point0.0,
        // ])?;
        // let stack = run_interpreter(ec_add, initial_stack)?.stack().to_vec();
        // assert_eq!(stack, u256ify([point4.1, point4.0])?);

        Ok(())
    }
}

#[cfg(test)]
mod secp {
    use std::collections::HashMap;
    use std::str::FromStr;

    use anyhow::Result;
    use ethereum_types::U256;
    use hex_literal::hex;

    use crate::cpu::kernel::aggregator::{combined_kernel, KERNEL};
    use crate::cpu::kernel::constants::context_metadata::ContextMetadata;
    use crate::cpu::kernel::interpreter::{run, run_interpreter, Interpreter};
    use crate::cpu::kernel::tests::u256ify;
    use crate::memory::segments::Segment;

    #[test]
    fn test_ec_ops() -> Result<()> {
        // Make sure we can parse and assemble the entire kernel.
        let kernel = combined_kernel();
        let ec_add = kernel.global_labels["ec_add_valid_points_secp"];
        let ec_double = kernel.global_labels["ec_double_secp"];
        let ec_mul = kernel.global_labels["ec_mul_valid_point_secp"];
        let identity = ("0x0", "0x0");
        let point0 = (
            "0xc82ccceebd739e646631b7270ed8c33e96c4940b19db91eaf67da6ec92d109b",
            "0xe0d241d2de832656c3eed78271bb06b5602d6473742c7c48a38b9f0350a76164",
        );
        let point1 = (
            "0xbf26b1a7a46025d0a1787aa050d0bb83b8a4746010f873404389b8b23360919c",
            "0x65adeff3fed1b22fa10279b5a25b96694a20bcbf6b718c0412f6d34a2e9bb924",
        );
        // point2 = point0 + point1
        let point2 = (
            "0x191e8183402c6d6f5f22a9fe2a5ce17a7dd5184bd5d359c77189e9f714a18225",
            "0xe23fbb6913de7449d92e4dfbe278e2874fac80d53bfeb8fb3400462b7bfaec74",
        );
        // point3 = 2 * point0
        let point3 = (
            "0x7872498939b02197c2b6f0a0f5767f36551e43f910de472fbbff0538b21f5f45",
            "0x294e15025d935438023a0e4056892abd6405fade13cf2b3131d8755be7cebad",
        );
        let s = "0xa72ad7d8ce24135b5138f853d7a9896381c40523b5d1cf03072151f2af10e35e";
        // point4 = s * point0
        let point4 = (
            "0xd8bec38864f0fe56d429540e6de624afb8ddc7fba1f738337913922a30b96c14",
            "0x5b086b2720ac39d173777bc36a49629c80c3a3e55e1c50527e60016d9be71318",
        );

        // // Standard addition #1
        // let initial_stack = u256ify(["0xdeadbeef", point0.1, point0.0, point1.1, point1.0])?;
        // let stack = run_interpreter(ec_add, initial_stack)?.stack().to_vec();
        // assert_eq!(stack, u256ify([point2.1, point2.0])?);
        // // Standard addition #2
        // let initial_stack = u256ify(["0xdeadbeef", point1.1, point1.0, point0.1, point0.0])?;
        // let stack = run(&kernel.code, ec_add, initial_stack, &kernel.prover_inputs)?
        //     .stack()
        //     .to_vec();
        // assert_eq!(stack, u256ify([point2.1, point2.0])?);
        //
        // // Standard doubling #1
        // let initial_stack = u256ify(["0xdeadbeef", point0.1, point0.0, point0.1, point0.0])?;
        // let stack = run_interpreter(ec_add, initial_stack)?.stack().to_vec();
        // assert_eq!(stack, u256ify([point3.1, point3.0])?);
        // // Standard doubling #2
        // let initial_stack = u256ify(["0xdeadbeef", point0.1, point0.0])?;
        // let stack = run_interpreter(ec_double, initial_stack)?.stack().to_vec();
        // assert_eq!(stack, u256ify([point3.1, point3.0])?);
        // // Standard doubling #3
        // let initial_stack = u256ify(["0xdeadbeef", "0x2", point0.1, point0.0])?;
        // let stack = run_interpreter(ec_mul, initial_stack)?.stack().to_vec();
        // assert_eq!(stack, u256ify([point3.1, point3.0])?);
        //
        // // Addition with identity #1
        // let initial_stack = u256ify(["0xdeadbeef", identity.1, identity.0, point1.1, point1.0])?;
        // let stack = run_interpreter(ec_add, initial_stack)?.stack().to_vec();
        // assert_eq!(stack, u256ify([point1.1, point1.0])?);
        // // Addition with identity #2
        // let initial_stack = u256ify(["0xdeadbeef", point1.1, point1.0, identity.1, identity.0])?;
        // let stack = run_interpreter(ec_add, initial_stack)?.stack().to_vec();
        // assert_eq!(stack, u256ify([point1.1, point1.0])?);
        // // Addition with identity #3
        // let initial_stack =
        //     u256ify(["0xdeadbeef", identity.1, identity.0, identity.1, identity.0])?;
        // let stack = run_interpreter(ec_add, initial_stack)?.stack().to_vec();
        // assert_eq!(stack, u256ify([identity.1, identity.0])?);

        // Scalar multiplication #1
        let initial_stack = u256ify(["0xdeadbeef", s, point0.1, point0.0])?;
        let stack = run_interpreter(ec_mul, initial_stack)?.stack().to_vec();
        assert_eq!(stack, u256ify([point4.1, point4.0])?);
        // // Scalar multiplication #2
        // let initial_stack = u256ify(["0xdeadbeef", "0x0", point0.1, point0.0])?;
        // let stack = run_interpreter(ec_mul, initial_stack)?.stack().to_vec();
        // assert_eq!(stack, u256ify([identity.1, identity.0])?);
        // // Scalar multiplication #3
        // let initial_stack = u256ify(["0xdeadbeef", "0x1", point0.1, point0.0])?;
        // let stack = run_interpreter(ec_mul, initial_stack)?.stack().to_vec();
        // assert_eq!(stack, u256ify([point0.1, point0.0])?);
        // // Scalar multiplication #4
        // let initial_stack = u256ify(["0xdeadbeef", s, identity.1, identity.0])?;
        // let stack = run_interpreter(ec_mul, initial_stack)?.stack().to_vec();
        // assert_eq!(stack, u256ify([identity.1, identity.0])?);
        //
        // // Multiple calls
        // let ec_mul_hex = format!("0x{ec_mul:x}");
        // let initial_stack = u256ify([
        //     "0xdeadbeef",
        //     s,
        //     &ec_mul_hex,
        //     identity.1,
        //     identity.0,
        //     point0.1,
        //     point0.0,
        // ])?;
        // let stack = run_interpreter(ec_add, initial_stack)?.stack().to_vec();
        // assert_eq!(stack, u256ify([point4.1, point4.0])?);

        Ok(())
    }

    #[test]
    fn test_glv() -> Result<()> {
        // Make sure we can parse and assemble the entire kernel.
        let glv = KERNEL.global_labels["glv"];
        let identity = ("0x0", "0x0");

        let point0 = (
            U256::from_str("0x294b41341d6eeeaf9c2da27de567b6d26e441f089fae4e0a6ea5bbb5ebd8df99")?,
            U256::from_str("0x20a2d7ba1da7c72c7b5b48d5f130f70e570912c549b6dea07d9cfa8403bc81ca")?,
        );
        let s =
            U256::from_str("0x1a85b7f36ae47652bdde28ba336407ace605e1954db1280e4db3ce4e25ba4807")?;
        let s = U256::from_str("1")?;
        let point4 = ("", "");
        let initial_stack = vec![];

        // let weier = hex!("");
        let weier = hex!("346001146060360460600236141661001d5761019060005260206000fd5b6060360460021b603e016102006137326000396004810281600302826005020182601e01810383820384820385820386820387820388820360603604808001600a1b60e0019060061b5b3481357f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000180807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff70024ccef014a773d2cf7a7bd9d4391eb18d850970024ccef014a773d2cf7a7bd9d4391eb18d85028082109103036789d3256894d213e3097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6802d91d232ec7e0b3d786096802d91d232ec7e0b3d786028082109103037f30644e72e131a029b85045b68181585cb8e665ff8b011694c1d039a872b0eed9090103917f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018377b3c4d79d41a917585bfc41088d8daaa78b17ea66b99c90dd090860051b9060051b5b937ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0001938e6005026060360461080002610200010390806101e01651565b908e019060041c806101e01651565b8060031c6103e0168601828f019283516002018085528f03015260081c601001806101e01651565b8060021c6103e0168601828d019283516002018085528d03015260071c601001806101e01651565b8060011c6103e0168601828b019283516002018085528b03015260061c601001806101e01651565b806103e01686018289019283516002018085528903015260051c601001806101e01651565b601f81116101ee575090348303926101b0575050506020018036036100675750505050505050505050506000037f912CEB58A394E07D28F0D12384840918C6843FB439555FA7B461A4448976F7D57f60C89CE5C263405370A08B6D0302B0BB2F02D522D0E3951A7841182DB0F9FA8E7f30644E72E131A029B85045B68181585D97816A916871CA8D3C208C16D87CFD477759e26bcea0d48bacd4f263f1acdb5c4f5763473177fffffe60c0528260a052816080526040600336048001033560206003360480010335828080848009840960030883828009146103825761019060005260206000f35b82818009838160021b81808083880996800960030281818009878303341b018a038060005287010992098403341b91341b604052810160205282602051820160005184018280828009806103d65760006000fd5b818184099382828909830383808084800983341b01880891820181930982878a09018b0382956040600336048001036060526104fc565b604060605103606052808480808380098093098160605135606051602001358280808480098409600308838280091461044c5761019060005260206000f35b9409920985818009868160021b8180828709810381878009600302908282800981341b018060a0510360005201099209341b0160a051036020528583341b82098060405290919286808084800993840994830987809486098403849283818009848080838509602051098401916000510984018580828009806104cf5760006000fd5b818184099382828909830383808084800983341b01880891820181930982878a0901608051038280968199095b83818009848080838509602051098401916000510984018580828009806105235760006000fd5b818184099382828909830383808084800983341b01880891820181930982878a09016080510382809681990983818009848080838509602051098401916000510984018580828009806105765760006000fd5b818184099382828909830383808084800983341b01880891820181930982878a09016080510382809681990983818009848080838509602051098401916000510984018580828009806105c95760006000fd5b818184099382828909830383808084800983341b01880891820181930982878a090160805103828096819909838180098480808385096020510984019160005109840185808280098061061c5760006000fd5b818184099382828909830383808084800983341b01880891820181930982878a090160805103828096819909838180098480808385096020510984019160005109840185808280098061066f5760006000fd5b818184099382828909830383808084800983341b01880891820181930982878a09016080510382809681990983818009848080838509602051098401916000510984018580828009806106c25760006000fd5b818184099382828909830383808084800983341b01880891820181930982878a09016080510382808097819a096040510960605161040d573d52343460603604600f036101cd0261070f01565b91849083098061732052806176e0528403806172e0526177205291839083098303838160c05109806176c05261770052806172c05261730052920993099384098061736052806176a0528203806172a0526177605292830983038360c051820980617680526177405280617280526173405292099309938409806173a0528061766052820380617260526177a05292830983038360c051820980617640526177805280617240526173805292099309938409806173e0528061762052820380617220526177e05292830983038360c051820980617600526177c05280617200526173c052920993099384098061742052806175e0528203806171e0526178205292830983038360c0518209806175c05261780052806171c05261740052920993099384098061746052806175a0528203806171a0526178605292830983038360c051820980617580526178405280617180526174405292099309938409806174a0528061756052820380617160526178a05292830983038360c051820980617540526178805280617140526174805292099309938409806174e0528061752052820380617120526178e05292830985038560c051820980617500526178c05280617100526174c052920992095b918490830980616b205280616ee052840380616ae052616f205291839083098303838160c0510980616ec052616f005280616ac052616b00529209930993840980616b605280616ea052820380616aa052616f605292830983038360c051820980616e8052616f405280616a8052616b40529209930993840980616ba05280616e6052820380616a6052616fa05292830983038360c051820980616e4052616f805280616a4052616b80529209930993840980616be05280616e2052820380616a2052616fe05292830983038360c051820980616e0052616fc05280616a0052616bc0529209930993840980616c205280616de0528203806169e0526170205292830983038360c051820980616dc05261700052806169c052616c00529209930993840980616c605280616da0528203806169a0526170605292830983038360c051820980616d8052617040528061698052616c40529209930993840980616ca05280616d6052820380616960526170a05292830983038360c051820980616d4052617080528061694052616c80529209930993840980616ce05280616d2052820380616920526170e05292830985038560c051820980616d00526170c0528061690052616cc052920992095b91849083098061632052806166e0528403806162e0526167205291839083098303838160c05109806166c05261670052806162c05261630052920993099384098061636052806166a0528203806162a0526167605292830983038360c051820980616680526167405280616280526163405292099309938409806163a0528061666052820380616260526167a05292830983038360c051820980616640526167805280616240526163805292099309938409806163e0528061662052820380616220526167e05292830983038360c051820980616600526167c05280616200526163c052920993099384098061642052806165e0528203806161e0526168205292830983038360c0518209806165c05261680052806161c05261640052920993099384098061646052806165a0528203806161a0526168605292830983038360c051820980616580526168405280616180526164405292099309938409806164a0528061656052820380616160526168a05292830983038360c051820980616540526168805280616140526164805292099309938409806164e0528061652052820380616120526168e05292830985038560c051820980616500526168c05280616100526164c052920992095b918490830980615b205280615ee052840380615ae052615f205291839083098303838160c0510980615ec052615f005280615ac052615b00529209930993840980615b605280615ea052820380615aa052615f605292830983038360c051820980615e8052615f405280615a8052615b40529209930993840980615ba05280615e6052820380615a6052615fa05292830983038360c051820980615e4052615f805280615a4052615b80529209930993840980615be05280615e2052820380615a2052615fe05292830983038360c051820980615e0052615fc05280615a0052615bc0529209930993840980615c205280615de0528203806159e0526160205292830983038360c051820980615dc05261600052806159c052615c00529209930993840980615c605280615da0528203806159a0526160605292830983038360c051820980615d8052616040528061598052615c40529209930993840980615ca05280615d6052820380615960526160a05292830983038360c051820980615d4052616080528061594052615c80529209930993840980615ce05280615d2052820380615920526160e05292830985038560c051820980615d00526160c0528061590052615cc052920992095b91849083098061532052806156e0528403806152e0526157205291839083098303838160c05109806156c05261570052806152c05261530052920993099384098061536052806156a0528203806152a0526157605292830983038360c051820980615680526157405280615280526153405292099309938409806153a0528061566052820380615260526157a05292830983038360c051820980615640526157805280615240526153805292099309938409806153e0528061562052820380615220526157e05292830983038360c051820980615600526157c05280615200526153c052920993099384098061542052806155e0528203806151e0526158205292830983038360c0518209806155c05261580052806151c05261540052920993099384098061546052806155a0528203806151a0526158605292830983038360c051820980615580526158405280615180526154405292099309938409806154a0528061556052820380615160526158a05292830983038360c051820980615540526158805280615140526154805292099309938409806154e0528061552052820380615120526158e05292830985038560c051820980615500526158c05280615100526154c052920992095b918490830980614b205280614ee052840380614ae052614f205291839083098303838160c0510980614ec052614f005280614ac052614b00529209930993840980614b605280614ea052820380614aa052614f605292830983038360c051820980614e8052614f405280614a8052614b40529209930993840980614ba05280614e6052820380614a6052614fa05292830983038360c051820980614e4052614f805280614a4052614b80529209930993840980614be05280614e2052820380614a2052614fe05292830983038360c051820980614e0052614fc05280614a0052614bc0529209930993840980614c205280614de0528203806149e0526150205292830983038360c051820980614dc05261500052806149c052614c00529209930993840980614c605280614da0528203806149a0526150605292830983038360c051820980614d8052615040528061498052614c40529209930993840980614ca05280614d6052820380614960526150a05292830983038360c051820980614d4052615080528061494052614c80529209930993840980614ce05280614d2052820380614920526150e05292830985038560c051820980614d00526150c0528061490052614cc052920992095b91849083098061432052806146e0528403806142e0526147205291839083098303838160c05109806146c05261470052806142c05261430052920993099384098061436052806146a0528203806142a0526147605292830983038360c051820980614680526147405280614280526143405292099309938409806143a0528061466052820380614260526147a05292830983038360c051820980614640526147805280614240526143805292099309938409806143e0528061462052820380614220526147e05292830983038360c051820980614600526147c05280614200526143c052920993099384098061442052806145e0528203806141e0526148205292830983038360c0518209806145c05261480052806141c05261440052920993099384098061446052806145a0528203806141a0526148605292830983038360c051820980614580526148405280614180526144405292099309938409806144a0528061456052820380614160526148a05292830983038360c051820980614540526148805280614140526144805292099309938409806144e0528061452052820380614120526148e05292830985038560c051820980614500526148c05280614100526144c052920992095b918490830980613b205280613ee052840380613ae052613f205291839083098303838160c0510980613ec052613f005280613ac052613b00529209930993840980613b605280613ea052820380613aa052613f605292830983038360c051820980613e8052613f405280613a8052613b40529209930993840980613ba05280613e6052820380613a6052613fa05292830983038360c051820980613e4052613f805280613a4052613b80529209930993840980613be05280613e2052820380613a2052613fe05292830983038360c051820980613e0052613fc05280613a0052613bc0529209930993840980613c205280613de0528203806139e0526140205292830983038360c051820980613dc05261400052806139c052613c00529209930993840980613c605280613da0528203806139a0526140605292830983038360c051820980613d8052614040528061398052613c40529209930993840980613ca05280613d6052820380613960526140a05292830983038360c051820980613d4052614080528061394052613c80529209930993840980613ce05280613d2052820380613920526140e05292830985038560c051820980613d00526140c0528061390052613cc052920992095b91849083098061332052806136e0528403806132e0526137205291839083098303838160c05109806136c05261370052806132c05261330052920993099384098061336052806136a0528203806132a0526137605292830983038360c051820980613680526137405280613280526133405292099309938409806133a0528061366052820380613260526137a05292830983038360c051820980613640526137805280613240526133805292099309938409806133e0528061362052820380613220526137e05292830983038360c051820980613600526137c05280613200526133c052920993099384098061342052806135e0528203806131e0526138205292830983038360c0518209806135c05261380052806131c05261340052920993099384098061346052806135a0528203806131a0526138605292830983038360c051820980613580526138405280613180526134405292099309938409806134a0528061356052820380613160526138a05292830983038360c051820980613540526138805280613140526134805292099309938409806134e0528061352052820380613120526138e05292830985038560c051820980613500526138c05280613100526134c052920992095b918490830980612b205280612ee052840380612ae052612f205291839083098303838160c0510980612ec052612f005280612ac052612b00529209930993840980612b605280612ea052820380612aa052612f605292830983038360c051820980612e8052612f405280612a8052612b40529209930993840980612ba05280612e6052820380612a6052612fa05292830983038360c051820980612e4052612f805280612a4052612b80529209930993840980612be05280612e2052820380612a2052612fe05292830983038360c051820980612e0052612fc05280612a0052612bc0529209930993840980612c205280612de0528203806129e0526130205292830983038360c051820980612dc05261300052806129c052612c00529209930993840980612c605280612da0528203806129a0526130605292830983038360c051820980612d8052613040528061298052612c40529209930993840980612ca05280612d6052820380612960526130a05292830983038360c051820980612d4052613080528061294052612c80529209930993840980612ce05280612d2052820380612920526130e05292830985038560c051820980612d00526130c0528061290052612cc052920992095b91849083098061232052806126e0528403806122e0526127205291839083098303838160c05109806126c05261270052806122c05261230052920993099384098061236052806126a0528203806122a0526127605292830983038360c051820980612680526127405280612280526123405292099309938409806123a0528061266052820380612260526127a05292830983038360c051820980612640526127805280612240526123805292099309938409806123e0528061262052820380612220526127e05292830983038360c051820980612600526127c05280612200526123c052920993099384098061242052806125e0528203806121e0526128205292830983038360c0518209806125c05261280052806121c05261240052920993099384098061246052806125a0528203806121a0526128605292830983038360c051820980612580526128405280612180526124405292099309938409806124a0528061256052820380612160526128a05292830983038360c051820980612540526128805280612140526124805292099309938409806124e0528061252052820380612120526128e05292830985038560c051820980612500526128c05280612100526124c052920992095b918490830980611b205280611ee052840380611ae052611f205291839083098303838160c0510980611ec052611f005280611ac052611b00529209930993840980611b605280611ea052820380611aa052611f605292830983038360c051820980611e8052611f405280611a8052611b40529209930993840980611ba05280611e6052820380611a6052611fa05292830983038360c051820980611e4052611f805280611a4052611b80529209930993840980611be05280611e2052820380611a2052611fe05292830983038360c051820980611e0052611fc05280611a0052611bc0529209930993840980611c205280611de0528203806119e0526120205292830983038360c051820980611dc05261200052806119c052611c00529209930993840980611c605280611da0528203806119a0526120605292830983038360c051820980611d8052612040528061198052611c40529209930993840980611ca05280611d6052820380611960526120a05292830983038360c051820980611d4052612080528061194052611c80529209930993840980611ce05280611d2052820380611920526120e05292830985038560c051820980611d00526120c0528061190052611cc052920992095b91849083098061132052806116e0528403806112e0526117205291839083098303838160c05109806116c05261170052806112c05261130052920993099384098061136052806116a0528203806112a0526117605292830983038360c051820980611680526117405280611280526113405292099309938409806113a0528061166052820380611260526117a05292830983038360c051820980611640526117805280611240526113805292099309938409806113e0528061162052820380611220526117e05292830983038360c051820980611600526117c05280611200526113c052920993099384098061142052806115e0528203806111e0526118205292830983038360c0518209806115c05261180052806111c05261140052920993099384098061146052806115a0528203806111a0526118605292830983038360c051820980611580526118405280611180526114405292099309938409806114a0528061156052820380611160526118a05292830983038360c051820980611540526118805280611140526114805292099309938409806114e0528061152052820380611120526118e05292830985038560c051820980611500526118c05280611100526114c052920992095b918490830980610b205280610ee052840380610ae052610f205291839083098303838160c0510980610ec052610f005280610ac052610b00529209930993840980610b605280610ea052820380610aa052610f605292830983038360c051820980610e8052610f405280610a8052610b40529209930993840980610ba05280610e6052820380610a6052610fa05292830983038360c051820980610e4052610f805280610a4052610b80529209930993840980610be05280610e2052820380610a2052610fe05292830983038360c051820980610e0052610fc05280610a0052610bc0529209930993840980610c205280610de0528203806109e0526110205292830983038360c051820980610dc05261100052806109c052610c00529209930993840980610c605280610da0528203806109a0526110605292830983038360c051820980610d8052611040528061098052610c40529209930993840980610ca05280610d6052820380610960526110a05292830983038360c051820980610d4052611080528061094052610c80529209930993840980610ce05280610d2052820380610920526110e05292830985038560c051820980610d00526110c0528061090052610cc052920992095b91849083098061032052806106e0528403806102e0526107205291839083098303838160c05109806106c05261070052806102c05261030052920993099384098061036052806106a0528203806102a0526107605292830983038360c051820980610680526107405280610280526103405292099309938409806103a0528061066052820380610260526107a05292830983038360c051820980610640526107805280610240526103805292099309938409806103e0528061062052820380610220526107e05292830983038360c051820980610600526107c05280610200526103c052920993099384098061042052806105e0528203806101e0526108205292830983038360c0518209806105c05261080052806101c05261040052920993099384098061046052806105a0528203806101a0526108605292830983038360c051820980610580526108405280610180526104405292099309938409806104a0528061056052820380610160526108a05292830983038360c051820980610540526108805280610140526104805298090981038160c051820980610500526108c05280610100526104c052930909806104e0528061052052810380610120526108e0523d518460071b606036046108000261020001035b850180511561221d5760603604610800026102000151603e0160603604610800026102000152607c613932601e3980518103601e870301516202ffe0168051840390602001518403346002848a019451035161ffff16565b858082800981605a8703516202ffe016806020015182868509839109860192829151098601818080838009806122ab5760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b85808280098160588703516202ffe016806020015182868509839109860192829151098601818080838009806123025760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b85808280098160568703516202ffe016806020015182868509839109860192829151098601818080838009806123595760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b85808280098160548703516202ffe016806020015182868509839109860192829151098601818080838009806123b05760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b85808280098160528703516202ffe016806020015182868509839109860192829151098601818080838009806124075760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b85808280098160508703516202ffe0168060200151828685098391098601928291510986018180808380098061245e5760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b858082800981604e8703516202ffe016806020015182868509839109860192829151098601818080838009806124b55760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b858082800981604c8703516202ffe0168060200151828685098391098601928291510986018180808380098061250c5760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b858082800981604a8703516202ffe016806020015182868509839109860192829151098601818080838009806125635760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b85808280098160488703516202ffe016806020015182868509839109860192829151098601818080838009806125ba5760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b85808280098160468703516202ffe016806020015182868509839109860192829151098601818080838009806126115760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b85808280098160448703516202ffe016806020015182868509839109860192829151098601818080838009806126685760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b85808280098160428703516202ffe016806020015182868509839109860192829151098601818080838009806126bf5760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b85808280098160408703516202ffe016806020015182868509839109860192829151098601818080838009806127165760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b858082800981603e8703516202ffe0168060200151828685098391098601928291510986018180808380098061276d5760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b858082800981603c8703516202ffe016806020015182868509839109860192829151098601818080838009806127c45760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b858082800981603a8703516202ffe0168060200151828685098391098601928291510986018180808380098061281b5760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b85808280098160388703516202ffe016806020015182868509839109860192829151098601818080838009806128725760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b85808280098160368703516202ffe016806020015182868509839109860192829151098601818080838009806128c95760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b85808280098160348703516202ffe016806020015182868509839109860192829151098601818080838009806129205760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b85808280098160328703516202ffe016806020015182868509839109860192829151098601818080838009806129775760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b85808280098160308703516202ffe016806020015182868509839109860192829151098601818080838009806129ce5760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b858082800981602e8703516202ffe01680602001518286850983910986019282915109860181808083800980612a255760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b858082800981602c8703516202ffe01680602001518286850983910986019282915109860181808083800980612a7c5760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b858082800981602a8703516202ffe01680602001518286850983910986019282915109860181808083800980612ad35760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b85808280098160288703516202ffe01680602001518286850983910986019282915109860181808083800980612b2a5760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b85808280098160268703516202ffe01680602001518286850983910986019282915109860181808083800980612b815760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b85808280098160248703516202ffe01680602001518286850983910986019282915109860181808083800980612bd85760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b85808280098160228703516202ffe01680602001518286850983910986019282915109860181808083800980612c2f5760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b85808280098160208703516202ffe01680602001518286850983910986019282915109860181808083800980612c865760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b8582341b9283098681341b81808083890981039780096003028181800988341b019788010992090191869109850388840193515161ffff16565b858082800981605a8703516202ffe01680602001518286850983910986019282915109860181808083800980612d175760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b85808280098160588703516202ffe01680602001518286850983910986019282915109860181808083800980612d6e5760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b85808280098160568703516202ffe01680602001518286850983910986019282915109860181808083800980612dc55760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b85808280098160548703516202ffe01680602001518286850983910986019282915109860181808083800980612e1c5760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b85808280098160528703516202ffe01680602001518286850983910986019282915109860181808083800980612e735760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b85808280098160508703516202ffe01680602001518286850983910986019282915109860181808083800980612eca5760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b858082800981604e8703516202ffe01680602001518286850983910986019282915109860181808083800980612f215760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b858082800981604c8703516202ffe01680602001518286850983910986019282915109860181808083800980612f785760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b858082800981604a8703516202ffe01680602001518286850983910986019282915109860181808083800980612fcf5760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b85808280098160488703516202ffe016806020015182868509839109860192829151098601818080838009806130265760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b85808280098160468703516202ffe0168060200151828685098391098601928291510986018180808380098061307d5760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b85808280098160448703516202ffe016806020015182868509839109860192829151098601818080838009806130d45760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b85808280098160428703516202ffe0168060200151828685098391098601928291510986018180808380098061312b5760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b85808280098160408703516202ffe016806020015182868509839109860192829151098601818080838009806131825760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b858082800981603e8703516202ffe016806020015182868509839109860192829151098601818080838009806131d95760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b858082800981603c8703516202ffe016806020015182868509839109860192829151098601818080838009806132305760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b858082800981603a8703516202ffe016806020015182868509839109860192829151098601818080838009806132875760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b85808280098160388703516202ffe016806020015182868509839109860192829151098601818080838009806132de5760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b85808280098160368703516202ffe016806020015182868509839109860192829151098601818080838009806133355760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b85808280098160348703516202ffe0168060200151828685098391098601928291510986018180808380098061338c5760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b85808280098160328703516202ffe016806020015182868509839109860192829151098601818080838009806133e35760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b85808280098160308703516202ffe0168060200151828685098391098601928291510986018180808380098061343a5760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b858082800981602e8703516202ffe016806020015182868509839109860192829151098601818080838009806134915760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b858082800981602c8703516202ffe016806020015182868509839109860192829151098601818080838009806134e85760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b858082800981602a8703516202ffe0168060200151828685098391098601928291510986018180808380098061353f5760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b85808280098160288703516202ffe016806020015182868509839109860192829151098601818080838009806135965760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b85808280098160268703516202ffe016806020015182868509839109860192829151098601818080838009806135ed5760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b85808280098160248703516202ffe016806020015182868509839109860192829151098601818080838009806136445760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b85808280098160228703516202ffe0168060200151828685098391098601928291510986018180808380098061369b5760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b85808280098160208703516202ffe016806020015182868509839109860192829151098601818080838009806136f25760006000fd5b8184820999098103968189818780098a341b01089809940993850109018603905b8486910960405284900684036020528390063d5250505050505060603df3000000000000000000000000000000000000000000000000000000000000029a0000000000000000000000000000000000000000000000000000000000000275000000000000000000000000000000000000000000000000000000000000024d000000000000000000000000000000000000000000000000000000000000027500000000000000000000000000000000000000000000000000000000000002250000000000000000000000000000000000000000000000000000000000000275000000000000000000000000000000000000000000000000000000000000024d000000000000000000000000000000000000000000000000000000000000027500000000000000000000000000000000000000000000000000000000000001fd0000000000000000000000000000000000000000000000000000000000000275000000000000000000000000000000000000000000000000000000000000024d000000000000000000000000000000000000000000000000000000000000027500000000000000000000000000000000000000000000000000000000000002250000000000000000000000000000000000000000000000000000000000000275000000000000000000000000000000000000000000000000000000000000024d00000000000000000000000000000000000000000000000000000000000002752ca72c502bf92ba22b4b2af42a9d2a4629ef2998294128ea2893283c27e5278e273726e02689263225db2584252d24d6247f242823d1237a232322cc2275371336bc3665360e35b73560350934b2345b340433ad335632ff32a8325131fa31a3314c30f5309e30472ff02f992f422eeb2e942e3d2de62d8f2d382ce1");
        let pi = HashMap::new();
        let mut int = Interpreter::new(&weier, 0, initial_stack, &pi);
        let calldata = hex!("2cb6e4ca9fb22ccdb6f2f8f70099a6dd47c8a01054e159fdad5431218173248b1bba7b678edf8888b26f3d0ea6bae40587827a1ffea0913d57dc553f0658b82315176347e20614431c644ecc595028622f60d953a41fc55c23a712388ff0ac65");
        // let calldata = hex!("f2f0b131eb13734233607156062a84488f58d494743e7a84b74dda719004e50715242451690f4d7cb039b29d5a9a9fb1feabf9e82543f7a27b7423b8268762ad1cbf5660bc870d852b62a8ddea846aaa6b2937b1329249d31fc7f64b010eb9d9");
        for i in 0..calldata.len() {
            int.memory
                .mstore_general(0, Segment::Calldata, i, calldata[i].into());
        }
        int.memory.mstore_general(
            0,
            Segment::ContextMetadata,
            ContextMetadata::CallValue as usize,
            U256::one(),
        );
        int.memory.mstore_general(
            0,
            Segment::ContextMetadata,
            ContextMetadata::CalldataSize as usize,
            calldata.len().into(),
        );
        dbg!(int.memory.mload_general(0, Segment::Code, 0));
        int.run()?;
        dbg!(int.stack());
        for i in 0..96 {
            print!("{},", int.memory.mload_general(0, Segment::Returndata, i))
        }

        Ok(())
    }

    #[test]
    fn test_ecdsa() -> Result<()> {
        // Make sure we can parse and assemble the entire kernel.
        let ecdsa = KERNEL.global_labels["ecdsa_msm"];
        let nafa = vec![
            21, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 13, 0, 0, 0, 0,
            0, 0, 0, 5, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,
            0, 0, 0, 0, 7, 0, 0, 0, 0, 21, 0, 0, 0, 0, 13, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 9,
            0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 25, 0, 0, 0,
            0, 25, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 1, 0, 0,
        ];
        let nafb = vec![
            0, 0, 0, 27, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 21, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 9, 0,
            0, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 31, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 25, 0, 0,
            0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 17, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0,
            0, 9, 0, 0, 0, 0, 7, 0, 0, 0, 0, 7, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0,
            0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
        ];
        let nafc = vec![
            19, 0, 0, 0, 0, 23, 0, 0, 0, 0, 17, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0,
            0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 23, 0, 0, 0, 0,
            11, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 9, 0, 0, 0,
            0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 7,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 1, 0,
        ];
        let nafd = vec![
            0, 0, 29, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 21, 0, 0,
            0, 0, 0, 0, 31, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 23, 0, 0, 0,
            0, 0, 0, 15, 0, 0, 0, 0, 3, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 9, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 17, 0, 0, 0, 0, 23, 0, 0, 0,
            0, 0, 0, 21, 0, 0, 0, 0, 23, 0, 0, 0, 0, 1, 0, 0,
        ];

        let initial_stack = vec![0xdeadbeefu32.into()];

        let mut int = Interpreter::new(&KERNEL.code, ecdsa, initial_stack, &KERNEL.prover_inputs);
        for i in 0..128 {
            int.memory
                .mstore_general(0, Segment::WnafA, i, nafa[127 - i].into());
        }
        for i in 0..128 {
            int.memory
                .mstore_general(0, Segment::WnafB, i, nafb[127 - i].into());
        }
        for i in 0..128 {
            int.memory
                .mstore_general(0, Segment::WnafC, i, nafc[127 - i].into());
        }
        for i in 0..128 {
            int.memory
                .mstore_general(0, Segment::WnafD, i, nafd[127 - i].into());
        }

        let table_g = u256ify([
            "0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
            "0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
            "0xf9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9",
            "0x388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672",
            "0x2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4",
            "0xd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6",
            "0x5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc",
            "0x6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da",
            "0xacd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe",
            "0xcc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37",
            "0x774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb",
            "0xd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b",
            "0xf28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8",
            "0xab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81",
            "0xd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e",
            "0x581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58",
            "0xd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e",
            "0xa7e1d78d57938d597c7bd13dd733921015bf50d427692c5a3afb235f095d90d7",
            "0xf28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8",
            "0xf54f6fd17277f5768a7ded149a3250b8c5e5f925ade056e0d64a34ac24fc0eae",
            "0x774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb",
            "0x267b5fcd1494a1e6fdbc22a928484c9ac8d24e1d20062957cfe28b3536ac3614",
            "0xacd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe",
            "0x33cc76de4f5826029bc7f68e89c49e165227775bc8a071f0fa33d9d439b05ff8",
            "0x5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc",
            "0x951435bf45daa69f5ce8729279e5ab2457ec2f47ec02184a5af7d9d6f78d9755",
            "0x2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4",
            "0x2753ddd9c91a1c292b24562259363bd90877d8e454f297bf235782c459539959",
            "0xf9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9",
            "0xc77084f09cd217ebf01cc819d5c80ca99aff5666cb3ddce4934602897b4715bd",
            "0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
            "0xb7c52588d95c3b9aa25b0403f1eef75702e84bb7597aabe663b82f6f04ef2777",
        ])?;

        let table_q = u256ify([
            "0xf212ceb1de39d4f60b913e04990ac959c43369da9a6bac46f0e55e4298228aff",
            "0x1573e3e020286de02eed0ab499ea314b9e7a037b6c1ac9ff73dd27f8b59eef1",
            "0x55c63d63f7302880d113baf54f8e2e954df5a2c2b9c266c88aaedb712bb01581",
            "0xc57ff9008c37ebe8ec5d68e952fbd7543beabdbd167709a836fc618afb37283",
            "0x6f997fb77607bc634239dbfa14dae2b6275e4d34c125e5ee51e394b7d3a18880",
            "0x98bcc0293806b124b557f0826a7acceac7e62f27677e1678095517859e58bfbd",
            "0x25a9449724c67d31fce7a5239ab11b426e00eb77410e7b3037255f1b9a1310d3",
            "0x32d5fb4fa3b1ea97d885ce8b8a5f3a93b1c805fc3229ecb2c68e9af28610df8",
            "0x937b2082d0eb3a48980c3b54501aa0fbad83f4ba483f0db0d066dc22d2696e95",
            "0xd264218db2a9722580462c97c8c0b713f45e629164b63f9b606fa1f394fbd25f",
            "0xcd31547d57cb9ccd04d1bfb1af4cb34be177a69fb950eccd7ca4e98e95234224",
            "0x68562d0a4a43e1977442b4040238c2c9940ffb418f852ee02d23d776b3a79693",
            "0x32502c66fc24b4b4df2fca84c6cd5263e88d501bc1cc1ae5839cec2397911b62",
            "0x6fd903106aeadd4ad9f92c0c0f07c7565a7cd8d8dce9f4e35f01d8d0453b3157",
            "0x380dcffa86348ab8e14b6d77263e047cc5c38f27f06dff220bffd2d5d0a32d99",
            "0x39191a3a732fcb00da927ecb5b53cbfe6c2d2bebf7a65acfead1442411989e77",
            "0x380dcffa86348ab8e14b6d77263e047cc5c38f27f06dff220bffd2d5d0a32d99",
            "0xc6e6e5c58cd034ff256d8134a4ac340193d2d4140859a530152ebbdaee675db8",
            "0x32502c66fc24b4b4df2fca84c6cd5263e88d501bc1cc1ae5839cec2397911b62",
            "0x9026fcef951522b52606d3f3f0f838a9a583272723160b1ca0fe272ebac4cad8",
            "0xcd31547d57cb9ccd04d1bfb1af4cb34be177a69fb950eccd7ca4e98e95234224",
            "0x97a9d2f5b5bc1e688bbd4bfbfdc73d366bf004be707ad11fd2dc28884c58659c",
            "0x937b2082d0eb3a48980c3b54501aa0fbad83f4ba483f0db0d066dc22d2696e95",
            "0x2d9bde724d568dda7fb9d368373f48ec0ba19d6e9b49c0649f905e0b6b0429d0",
            "0x25a9449724c67d31fce7a5239ab11b426e00eb77410e7b3037255f1b9a1310d3",
            "0xfcd2a04b05c4e1568277a317475a0c56c4e37fa03cdd6134d397164fd79eee37",
            "0x6f997fb77607bc634239dbfa14dae2b6275e4d34c125e5ee51e394b7d3a18880",
            "0x67433fd6c7f94edb4aa80f7d958533153819d0d89881e987f6aae87961a73c72",
            "0x55c63d63f7302880d113baf54f8e2e954df5a2c2b9c266c88aaedb712bb01581",
            "0xf3a8006ff73c8141713a29716ad0428abc4154242e988f657c9039e6504c89ac",
            "0xf212ceb1de39d4f60b913e04990ac959c43369da9a6bac46f0e55e4298228aff",
            "0xfea8c1c1fdfd7921fd112f54b6615ceb46185fc8493e536008c22d7f74a60d3e",
        ])?;

        for i in 0..table_g.len() {
            int.memory
                .mstore_general(0, Segment::EcdsaTableG, i, table_g[i]);
        }
        for i in 0..table_q.len() {
            int.memory
                .mstore_general(0, Segment::EcdsaTableQ, i, table_q[i]);
        }

        int.run()?;

        dbg!(int.stack());

        Ok(())
    }

    #[test]
    fn test_wnaf() -> Result<()> {
        let wnaf = KERNEL.global_labels["wnaf"];

        let initial_stack = u256ify(["0xdeadbeef", "0x26f18ec289486b2a70830f6286a31015", "0x11"])?;

        let mut int = Interpreter::new(&KERNEL.code, wnaf, initial_stack, &KERNEL.prover_inputs);
        int.run()?;

        dbg!(int.stack());

        let mut yo = Vec::new();
        for i in 0..128 {
            // println!("{}", int.memory.mload_general(0, Segment::WnafA, i));
            yo.push(int.memory.mload_general(0, Segment::WnafA, i));
        }

        let mut nafa = vec![
            21, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 13, 0, 0, 0, 0,
            0, 0, 0, 5, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,
            0, 0, 0, 0, 7, 0, 0, 0, 0, 21, 0, 0, 0, 0, 13, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 9,
            0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 25, 0, 0, 0,
            0, 25, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 1, 0, 0,
        ];
        nafa.reverse();
        let nafa: Vec<_> = nafa.into_iter().map(|x| x.into()).collect();
        assert_eq!(yo, nafa);

        Ok(())
    }

    #[test]
    fn test_precomputation() -> Result<()> {
        let precompute = KERNEL.global_labels["precompute_table"];

        let initial_stack = u256ify([
            "0xdeadbeef",
            "0x1573e3e020286de02eed0ab499ea314b9e7a037b6c1ac9ff73dd27f8b59eef1",
            "0xf212ceb1de39d4f60b913e04990ac959c43369da9a6bac46f0e55e4298228aff",
        ])?;

        let mut int = Interpreter::new(
            &KERNEL.code,
            precompute,
            initial_stack,
            &KERNEL.prover_inputs,
        );
        int.run()?;

        let mut yo = Vec::new();
        for i in 0..32 {
            // println!("{}", int.memory.mload_general(0, Segment::WnafA, i));
            yo.push(int.memory.mload_general(0, Segment::EcdsaTableQ, i));
        }

        let table_q = u256ify([
            "0xf212ceb1de39d4f60b913e04990ac959c43369da9a6bac46f0e55e4298228aff",
            "0x1573e3e020286de02eed0ab499ea314b9e7a037b6c1ac9ff73dd27f8b59eef1",
            "0x55c63d63f7302880d113baf54f8e2e954df5a2c2b9c266c88aaedb712bb01581",
            "0xc57ff9008c37ebe8ec5d68e952fbd7543beabdbd167709a836fc618afb37283",
            "0x6f997fb77607bc634239dbfa14dae2b6275e4d34c125e5ee51e394b7d3a18880",
            "0x98bcc0293806b124b557f0826a7acceac7e62f27677e1678095517859e58bfbd",
            "0x25a9449724c67d31fce7a5239ab11b426e00eb77410e7b3037255f1b9a1310d3",
            "0x32d5fb4fa3b1ea97d885ce8b8a5f3a93b1c805fc3229ecb2c68e9af28610df8",
            "0x937b2082d0eb3a48980c3b54501aa0fbad83f4ba483f0db0d066dc22d2696e95",
            "0xd264218db2a9722580462c97c8c0b713f45e629164b63f9b606fa1f394fbd25f",
            "0xcd31547d57cb9ccd04d1bfb1af4cb34be177a69fb950eccd7ca4e98e95234224",
            "0x68562d0a4a43e1977442b4040238c2c9940ffb418f852ee02d23d776b3a79693",
            "0x32502c66fc24b4b4df2fca84c6cd5263e88d501bc1cc1ae5839cec2397911b62",
            "0x6fd903106aeadd4ad9f92c0c0f07c7565a7cd8d8dce9f4e35f01d8d0453b3157",
            "0x380dcffa86348ab8e14b6d77263e047cc5c38f27f06dff220bffd2d5d0a32d99",
            "0x39191a3a732fcb00da927ecb5b53cbfe6c2d2bebf7a65acfead1442411989e77",
            "0x380dcffa86348ab8e14b6d77263e047cc5c38f27f06dff220bffd2d5d0a32d99",
            "0xc6e6e5c58cd034ff256d8134a4ac340193d2d4140859a530152ebbdaee675db8",
            "0x32502c66fc24b4b4df2fca84c6cd5263e88d501bc1cc1ae5839cec2397911b62",
            "0x9026fcef951522b52606d3f3f0f838a9a583272723160b1ca0fe272ebac4cad8",
            "0xcd31547d57cb9ccd04d1bfb1af4cb34be177a69fb950eccd7ca4e98e95234224",
            "0x97a9d2f5b5bc1e688bbd4bfbfdc73d366bf004be707ad11fd2dc28884c58659c",
            "0x937b2082d0eb3a48980c3b54501aa0fbad83f4ba483f0db0d066dc22d2696e95",
            "0x2d9bde724d568dda7fb9d368373f48ec0ba19d6e9b49c0649f905e0b6b0429d0",
            "0x25a9449724c67d31fce7a5239ab11b426e00eb77410e7b3037255f1b9a1310d3",
            "0xfcd2a04b05c4e1568277a317475a0c56c4e37fa03cdd6134d397164fd79eee37",
            "0x6f997fb77607bc634239dbfa14dae2b6275e4d34c125e5ee51e394b7d3a18880",
            "0x67433fd6c7f94edb4aa80f7d958533153819d0d89881e987f6aae87961a73c72",
            "0x55c63d63f7302880d113baf54f8e2e954df5a2c2b9c266c88aaedb712bb01581",
            "0xf3a8006ff73c8141713a29716ad0428abc4154242e988f657c9039e6504c89ac",
            "0xf212ceb1de39d4f60b913e04990ac959c43369da9a6bac46f0e55e4298228aff",
            "0xfea8c1c1fdfd7921fd112f54b6615ceb46185fc8493e536008c22d7f74a60d3e",
        ])?;

        assert_eq!(yo, table_q);

        Ok(())
    }

    #[test]
    fn test_precomputation_base_point() -> Result<()> {
        let precompute = KERNEL.global_labels["precompute_table_base_point"];

        let initial_stack = u256ify(["0xdeadbeef"])?;

        let mut int = Interpreter::new(
            &KERNEL.code,
            precompute,
            initial_stack,
            &KERNEL.prover_inputs,
        );
        int.run()?;

        let mut yo = Vec::new();
        for i in 0..32 {
            yo.push(int.memory.mload_general(0, Segment::EcdsaTableG, i));
        }

        let table_g = u256ify([
            "0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
            "0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
            "0xf9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9",
            "0x388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672",
            "0x2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4",
            "0xd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6",
            "0x5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc",
            "0x6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da",
            "0xacd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe",
            "0xcc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37",
            "0x774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb",
            "0xd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b",
            "0xf28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8",
            "0xab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81",
            "0xd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e",
            "0x581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58",
            "0xd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e",
            "0xa7e1d78d57938d597c7bd13dd733921015bf50d427692c5a3afb235f095d90d7",
            "0xf28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8",
            "0xf54f6fd17277f5768a7ded149a3250b8c5e5f925ade056e0d64a34ac24fc0eae",
            "0x774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb",
            "0x267b5fcd1494a1e6fdbc22a928484c9ac8d24e1d20062957cfe28b3536ac3614",
            "0xacd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe",
            "0x33cc76de4f5826029bc7f68e89c49e165227775bc8a071f0fa33d9d439b05ff8",
            "0x5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc",
            "0x951435bf45daa69f5ce8729279e5ab2457ec2f47ec02184a5af7d9d6f78d9755",
            "0x2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4",
            "0x2753ddd9c91a1c292b24562259363bd90877d8e454f297bf235782c459539959",
            "0xf9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9",
            "0xc77084f09cd217ebf01cc819d5c80ca99aff5666cb3ddce4934602897b4715bd",
            "0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
            "0xb7c52588d95c3b9aa25b0403f1eef75702e84bb7597aabe663b82f6f04ef2777",
        ])?;

        assert_eq!(yo, table_g);

        Ok(())
    }

    #[test]
    fn test_ecdsa_fast() -> Result<()> {
        let ecdsa = KERNEL.global_labels["ecrecover_fast"];

        let initial_stack = u256ify([
            "0xdeadbeef",
            "0x1573e3e020286de02eed0ab499ea314b9e7a037b6c1ac9ff73dd27f8b59eef1",
            "0xf212ceb1de39d4f60b913e04990ac959c43369da9a6bac46f0e55e4298228aff",
            "0x16a7689c947f8f6377707f5eea4e68f4",
            "0x3901add51f9494ef755ca0ca11e542d3",
            "0xfb7e0739d20d087af257d61247539d8",
            "0x26f18ec289486b2a70830f6286a31015",
        ])?;

        let mut int = Interpreter::new(&KERNEL.code, ecdsa, initial_stack, &KERNEL.prover_inputs);

        int.run()?;

        dbg!(int.stack());

        Ok(())
    }

    #[test]
    fn test_yo_glv() -> Result<()> {
        let glv = KERNEL.global_labels["glv"];

        let initial_stack = u256ify([
            "0xdeadbeef",
            // "0xd221e175ed6b35c103bcef5763d9db3c30f9f399dbfa8858a9286a3eba3c46f",
            "0x17486adede77df0b3ef3f6016403ce21f5f20e210d6b9f8dfdace14025edeac2",
        ])?;

        let mut int = Interpreter::new(&KERNEL.code, glv, initial_stack, &KERNEL.prover_inputs);

        int.run()?;

        dbg!(int.stack());

        Ok(())
    }

    #[test]
    fn test_yo_glv_verif() -> Result<()> {
        let glv = KERNEL.global_labels["glv"];

        let f = include_str!("out");
        let mut lines = f.lines();
        while let Some(k) = lines.next() {
            let k = U256::from_str_radix(k, 10)?;
            let res = lines.next().unwrap();
            let mut res = res
                .split_whitespace()
                .map(|s| U256::from_str_radix(s, 10).unwrap())
                .collect::<Vec<_>>();
            res.reverse();

            let mut initial_stack = u256ify(["0xdeadbeef"])?;
            initial_stack.push(k);

            let mut int = Interpreter::new(&KERNEL.code, glv, initial_stack, &KERNEL.prover_inputs);

            int.run()?;

            // dbg!(int.stack());
            // dbg!(res);
            assert_eq!(res, int.stack());
        }

        Ok(())
    }
}
